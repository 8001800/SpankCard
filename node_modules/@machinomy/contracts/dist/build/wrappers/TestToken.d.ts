import * as BigNumber from 'bignumber.js';
import * as Web3 from 'web3';
import * as truffle from 'truffle-contract';
export declare namespace TestToken {
    const ARTIFACT: any;
    interface Contract {
        address: string;
        constructor: {
            web3: Web3;
        };
        mintingFinished: {
            (): Promise<boolean>;
            call(): Promise<boolean>;
        };
        totalSupply: {
            (): Promise<BigNumber.BigNumber>;
            call(): Promise<BigNumber.BigNumber>;
        };
        balanceOf: {
            (_owner: string): Promise<BigNumber.BigNumber>;
            call(_owner: string): Promise<BigNumber.BigNumber>;
        };
        owner: {
            (): Promise<string>;
            call(): Promise<string>;
        };
        allowance: {
            (_owner: string, _spender: string): Promise<BigNumber.BigNumber>;
            call(_owner: string, _spender: string): Promise<BigNumber.BigNumber>;
        };
        approve: {
            (_spender: string, _value: BigNumber.BigNumber, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_spender: string, _value: BigNumber.BigNumber, options?: Web3.CallData): Promise<boolean>;
            estimateGas(_spender: string, _value: BigNumber.BigNumber): Promise<number>;
            request(_spender: string, _value: BigNumber.BigNumber): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        transferFrom: {
            (_from: string, _to: string, _value: BigNumber.BigNumber, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_from: string, _to: string, _value: BigNumber.BigNumber, options?: Web3.CallData): Promise<boolean>;
            estimateGas(_from: string, _to: string, _value: BigNumber.BigNumber): Promise<number>;
            request(_from: string, _to: string, _value: BigNumber.BigNumber): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        mint: {
            (_to: string, _amount: BigNumber.BigNumber, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_to: string, _amount: BigNumber.BigNumber, options?: Web3.CallData): Promise<boolean>;
            estimateGas(_to: string, _amount: BigNumber.BigNumber): Promise<number>;
            request(_to: string, _amount: BigNumber.BigNumber): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        decreaseApproval: {
            (_spender: string, _subtractedValue: BigNumber.BigNumber, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_spender: string, _subtractedValue: BigNumber.BigNumber, options?: Web3.CallData): Promise<boolean>;
            estimateGas(_spender: string, _subtractedValue: BigNumber.BigNumber): Promise<number>;
            request(_spender: string, _subtractedValue: BigNumber.BigNumber): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        finishMinting: {
            (options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(options?: Web3.CallData): Promise<boolean>;
            estimateGas(): Promise<number>;
            request(): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        transfer: {
            (_to: string, _value: BigNumber.BigNumber, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_to: string, _value: BigNumber.BigNumber, options?: Web3.CallData): Promise<boolean>;
            estimateGas(_to: string, _value: BigNumber.BigNumber): Promise<number>;
            request(_to: string, _value: BigNumber.BigNumber): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        increaseApproval: {
            (_spender: string, _addedValue: BigNumber.BigNumber, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_spender: string, _addedValue: BigNumber.BigNumber, options?: Web3.CallData): Promise<boolean>;
            estimateGas(_spender: string, _addedValue: BigNumber.BigNumber): Promise<number>;
            request(_spender: string, _addedValue: BigNumber.BigNumber): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        transferOwnership: {
            (newOwner: string, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(newOwner: string, options?: Web3.CallData): Promise<void>;
            estimateGas(newOwner: string): Promise<number>;
            request(newOwner: string): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        send: (value: BigNumber.BigNumber | number) => Promise<truffle.TransactionResult>;
        sendTransaction: (opts: Web3.CallData) => Promise<truffle.TransactionResult>;
    }
    interface Mint {
        to: string;
        amount: BigNumber.BigNumber;
    }
    function isMintEvent(something: truffle.AnyTransactionEvent): something is truffle.TransactionEvent<Mint>;
    interface MintFinished {
    }
    function isMintFinishedEvent(something: truffle.AnyTransactionEvent): something is truffle.TransactionEvent<MintFinished>;
    interface OwnershipTransferred {
        previousOwner: string;
        newOwner: string;
    }
    function isOwnershipTransferredEvent(something: truffle.AnyTransactionEvent): something is truffle.TransactionEvent<OwnershipTransferred>;
    interface Approval {
        owner: string;
        spender: string;
        value: BigNumber.BigNumber;
    }
    function isApprovalEvent(something: truffle.AnyTransactionEvent): something is truffle.TransactionEvent<Approval>;
    interface Transfer {
        from: string;
        to: string;
        value: BigNumber.BigNumber;
    }
    function isTransferEvent(something: truffle.AnyTransactionEvent): something is truffle.TransactionEvent<Transfer>;
    function contract(provider?: Web3.Provider, defaults?: Web3.CallData): truffle.TruffleContract<Contract>;
}
export default TestToken;
