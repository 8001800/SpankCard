import * as BigNumber from 'bignumber.js';
import * as Web3 from 'web3';
import * as truffle from 'truffle-contract';
export declare namespace PublicRegistry {
    const ARTIFACT: any;
    interface Contract {
        address: string;
        constructor: {
            web3: Web3;
        };
        resolve: {
            (cfAddress: string): Promise<string>;
            call(cfAddress: string): Promise<string>;
        };
        counterfactualAddress: {
            (_code: string, nonce: string): Promise<string>;
            call(_code: string, nonce: string): Promise<string>;
        };
        deploy: {
            (_code: string, nonce: string, options?: Web3.CallData): Promise<truffle.TransactionResult>;
            call(_code: string, nonce: string, options?: Web3.CallData): Promise<void>;
            estimateGas(_code: string, nonce: string): Promise<number>;
            request(_code: string, nonce: string): {
                method: string;
                params: [{
                    to: string;
                    data: string;
                }];
            };
        };
        send: (value: BigNumber.BigNumber | number) => Promise<truffle.TransactionResult>;
        sendTransaction: (opts: Web3.CallData) => Promise<truffle.TransactionResult>;
    }
    interface DidDeploy {
        id: string;
        deployed: string;
        owner: string;
    }
    function isDidDeployEvent(something: truffle.AnyTransactionEvent): something is truffle.TransactionEvent<DidDeploy>;
    function contract(provider?: Web3.Provider, defaults?: Web3.CallData): truffle.TruffleContract<Contract>;
}
export default PublicRegistry;
